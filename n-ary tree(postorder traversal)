/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<Integer> postorder(Node root) 
    {
        //Creating a list to store the result.
        List<Integer> res=new ArrayList<>();
        
        //Corner case.
        if(root==null)
        return res;
        
        //Creating a temporary list,to be used inside loop.
        List<Node> temp=new ArrayList<>();
        
        //Creating a stack and set to perform inorder traversal.
        Stack<Node> stk=new Stack<Node>();
        HashSet<Node> set=new HashSet<Node>();
        
        //Base initialization.
        stk.push(root);
        
        while(!stk.empty())
        {
            Node obj=stk.peek();
            temp=obj.children;
            
            if(temp.size()==0)
            {
            res.add(obj.val);
            set.add(obj);
            stk.pop();
            }
            else
            {
            int i=0;
            for(i=temp.size()-1;i>=0;i--)
            {
            if(!set.contains(temp.get(i)))
            stk.push(temp.get(i));
            else
            break;
            }
            if(i!=-1)
            {
            res.add(obj.val);
            set.add(obj);
            stk.pop();
            }
                
            }
            
        }
        return res;
    }
}
