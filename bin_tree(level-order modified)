/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) 
    {
        //Corner case.
        if(root==null)
        return new ArrayList<>();
        
        //To store the result.
        List<List<Integer>> res=new ArrayList<>();

        //Performing level-order traversal using list.
        ArrayList<TreeNode> al=new ArrayList<TreeNode>();
        al.add(root);
        
        while(al.size()!=0)
        {
            //temp1 is for storing elements of current level.
            ArrayList<Integer> temp1=new ArrayList<Integer>();
            
            //temp2 is for storing elements of next level.
            ArrayList<TreeNode> temp2=new ArrayList<TreeNode>();
            
            //Extraction begins!
            for(int i=0;i<al.size();i++)
            {
            TreeNode obj=al.get(i);
            temp1.add(obj.val);
            
            if(obj.left!=null&&obj.right==null)
            temp2.add(obj.left);
            else if(obj.left==null&&obj.right!=null)
            temp2.add(obj.right);
            else if(obj.left!=null&&obj.right!=null)
            {
            temp2.add(obj.left);
            temp2.add(obj.right);
            }
            }
            res.add(temp1);
            al=temp2;
        }
        return res;
        
    }
}
